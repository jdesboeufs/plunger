<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="109" failures="0" errors="0" time="1.664">
  <testsuite name="path.analyzers.archive" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:26" time="0.258" tests="11">
    <testcase classname="path.analyzers.archive should not update token if already analyzed" name="path.analyzers.archive should not update token if already analyzed" time="0.003">
    </testcase>
    <testcase classname="path.analyzers.archive should not update token if it is not an archive" name="path.analyzers.archive should not update token if it is not an archive" time="0.001">
    </testcase>
    <testcase classname="path.analyzers.archive should not extract archives if not specified in the options" name="path.analyzers.archive should not extract archives if not specified in the options" time="0">
    </testcase>
    <testcase classname="path.analyzers.archive should extract an archive and add a child with the extracted folder" name="path.analyzers.archive should extract an archive and add a child with the extracted folder" time="0.04">
    </testcase>
    <testcase classname="path.analyzers.archive should pass the filePath when specified" name="path.analyzers.archive should pass the filePath when specified" time="0.01">
    </testcase>
    <testcase classname="path.analyzers.archive should use the fileName when filePath is not specified" name="path.analyzers.archive should use the fileName when filePath is not specified" time="0.011">
    </testcase>
    <testcase classname="path.analyzers.archive should use the specified temporary path when available" name="path.analyzers.archive should use the specified temporary path when available" time="0.012">
    </testcase>
    <testcase classname="path.analyzers.archive should not mark invalid archives as analyzed and pass a warning message" name="path.analyzers.archive should not mark invalid archives as analyzed and pass a warning message" time="0.011">
    </testcase>
    <testcase classname="path.analyzers.archive should pass the url down to children" name="path.analyzers.archive should pass the url down to children" time="0.012">
    </testcase>
    <testcase classname="path.analyzers.archive should pass the fromUrl down to children" name="path.analyzers.archive should pass the fromUrl down to children" time="0.011">
    </testcase>
    <testcase classname="path.analyzers.archive should prioritize url over fromUrl when passing them down to children" name="path.analyzers.archive should prioritize url over fromUrl when passing them down to children" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="analyze" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:26" time="0.25" tests="5">
    <testcase classname="analyze should analyze a text file completely" name="analyze should analyze a text file completely" time="0.013">
    </testcase>
    <testcase classname="analyze should analyze an invalid path completely" name="analyze should analyze an invalid path completely" time="0.003">
    </testcase>
    <testcase classname="analyze should analyze a directory completely" name="analyze should analyze a directory completely" time="0.007">
    </testcase>
    <testcase classname="analyze should analyze an empty index-of completely" name="analyze should analyze an empty index-of completely" time="0.036">
    </testcase>
    <testcase classname="analyze should error if the inputType is not known" name="analyze should error if the inputType is not known" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="http.fetch" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:27" time="0.147" tests="12">
    <testcase classname="http.fetch should attach a response object to the token" name="http.fetch should attach a response object to the token" time="0.011">
    </testcase>
    <testcase classname="http.fetch should set the statusCode to the token" name="http.fetch should set the statusCode to the token" time="0.008">
    </testcase>
    <testcase classname="http.fetch should set the finalUrl to the token" name="http.fetch should set the finalUrl to the token" time="0.006">
    </testcase>
    <testcase classname="http.fetch should process URL redirections and set them to the token" name="http.fetch should process URL redirections and set them to the token" time="0.011">
    </testcase>
    <testcase classname="http.fetch should the user agent passed in the options" name="http.fetch should the user agent passed in the options" time="0.006">
    </testcase>
    <testcase classname="http.fetch should set if-modified-since when passing a lastModified string" name="http.fetch should set if-modified-since when passing a lastModified string" time="0.007">
    </testcase>
    <testcase classname="http.fetch should set if-modified-since when passing a lastModified date" name="http.fetch should set if-modified-since when passing a lastModified date" time="0.007">
    </testcase>
    <testcase classname="http.fetch should set if-none-match when passing an etag" name="http.fetch should set if-none-match when passing an etag" time="0.008">
    </testcase>
    <testcase classname="http.fetch should request both etags when passing an etag with a -gzip prefix" name="http.fetch should request both etags when passing an etag with a -gzip prefix" time="0.006">
    </testcase>
    <testcase classname="http.fetch should error if request has no body" name="http.fetch should error if request has no body" time="0.013">
    </testcase>
    <testcase classname="http.fetch should set the unchanged property for HTTP 304" name="http.fetch should set the unchanged property for HTTP 304" time="0.004">
    </testcase>
    <testcase classname="http.fetch should error for invalid http codes" name="http.fetch should error for invalid http codes" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="http.analyzers.index-of" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:27" time="0.126" tests="9">
    <testcase classname="http.analyzers.index-of should not update token if already analyzed" name="http.analyzers.index-of should not update token if already analyzed" time="0.001">
    </testcase>
    <testcase classname="http.analyzers.index-of should not parse url body if fileType does not contain types" name="http.analyzers.index-of should not parse url body if fileType does not contain types" time="0">
    </testcase>
    <testcase classname="http.analyzers.index-of should analyze content as an index of page" name="http.analyzers.index-of should analyze content as an index of page" time="0.016">
    </testcase>
    <testcase classname="http.analyzers.index-of should not analyze as index of if no indexOfMatches are specified" name="http.analyzers.index-of should not analyze as index of if no indexOfMatches are specified" time="0.011">
    </testcase>
    <testcase classname="http.analyzers.index-of should not analyze as index of if not indexOfMatches match" name="http.analyzers.index-of should not analyze as index of if not indexOfMatches match" time="0.008">
    </testcase>
    <testcase classname="http.analyzers.index-of should return an empty array of children for an empty index of" name="http.analyzers.index-of should return an empty array of children for an empty index of" time="0.008">
    </testcase>
    <testcase classname="http.analyzers.index-of should ignore invalid links" name="http.analyzers.index-of should ignore invalid links" time="0.008">
    </testcase>
    <testcase classname="http.analyzers.index-of should ignore links if they’re not included within base" name="http.analyzers.index-of should ignore links if they’re not included within base" time="0.008">
    </testcase>
    <testcase classname="http.analyzers.index-of should return an array of children" name="http.analyzers.index-of should return an array of children" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="http.analyzers.atom" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:27" time="0.118" tests="7">
    <testcase classname="http.analyzers.atom should not update token if already analyzed" name="http.analyzers.atom should not update token if already analyzed" time="0.002">
    </testcase>
    <testcase classname="http.analyzers.atom should not parse url body if fileType does not contain types" name="http.analyzers.atom should not parse url body if fileType does not contain types" time="0">
    </testcase>
    <testcase classname="http.analyzers.atom should analyze content as an atom feed" name="http.analyzers.atom should analyze content as an atom feed" time="0.017">
    </testcase>
    <testcase classname="http.analyzers.atom should extract children from the atom feed" name="http.analyzers.atom should extract children from the atom feed" time="0.01">
    </testcase>
    <testcase classname="http.analyzers.atom should support various content types" name="http.analyzers.atom should support various content types" time="0.015">
    </testcase>
    <testcase classname="http.analyzers.atom should not extract any child for an empty atom feed" name="http.analyzers.atom should not extract any child for an empty atom feed" time="0.008">
    </testcase>
    <testcase classname="http.analyzers.atom should not analyze non atom feeds" name="http.analyzers.atom should not analyze non atom feeds" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="http" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:27" time="0.113" tests="4">
    <testcase classname="http should not update token if already analyzed" name="http should not update token if already analyzed" time="0.002">
    </testcase>
    <testcase classname="http should analyze an index-of completely" name="http should analyze an index-of completely" time="0.017">
    </testcase>
    <testcase classname="http should allow overriding fetch options with cache.getUrlCache" name="http should allow overriding fetch options with cache.getUrlCache" time="0.017">
    </testcase>
    <testcase classname="http should call cache.settUrlCache to save url token data for caching purposes" name="http should call cache.settUrlCache to save url token data for caching purposes" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="path" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:27" time="0.095" tests="9">
    <testcase classname="path should not update token if already analyzed" name="path should not update token if already analyzed" time="0.001">
    </testcase>
    <testcase classname="path should throw if the file is not found" name="path should throw if the file is not found" time="0.001">
    </testcase>
    <testcase classname="path should analyze a text file completely" name="path should analyze a text file completely" time="0.003">
    </testcase>
    <testcase classname="path should analyze a directory completely" name="path should analyze a directory completely" time="0.002">
    </testcase>
    <testcase classname="path should analyze an archive completely" name="path should analyze an archive completely" time="0.013">
    </testcase>
    <testcase classname="path should analyze an invalid archive completely" name="path should analyze an invalid archive completely" time="0.013">
    </testcase>
    <testcase classname="path should error on unknown file types (symlink)" name="path should error on unknown file types (symlink)" time="0.006">
    </testcase>
    <testcase classname="path should remove the stats from the token on error" name="path should remove the stats from the token on error" time="0.002">
    </testcase>
    <testcase classname="path should mark the file as unchanged if the cache is matched" name="path should mark the file as unchanged if the cache is matched" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="util.archive" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:27" time="0.09" tests="8">
    <testcase classname="util.archive should return false if there are no types specified" name="util.archive should return false if there are no types specified" time="0.001">
    </testcase>
    <testcase classname="util.archive should return false if there are no archive types" name="util.archive should return false if there are no archive types" time="0">
    </testcase>
    <testcase classname="util.archive should return false if there are no valid types" name="util.archive should return false if there are no valid types" time="0">
    </testcase>
    <testcase classname="util.archive should return true if there is at least one archive type" name="util.archive should return true if there is at least one archive type" time="0">
    </testcase>
    <testcase classname="util.archive should error when trying to unarchive a file that does not exist" name="util.archive should error when trying to unarchive a file that does not exist" time="0.012">
    </testcase>
    <testcase classname="util.archive should error when trying to unarchive an invalid archive" name="util.archive should error when trying to unarchive an invalid archive" time="0.008">
    </testcase>
    <testcase classname="util.archive should extract an archive and return the unarchived path" name="util.archive should extract an archive and return the unarchived path" time="0.013">
    </testcase>
    <testcase classname="util.archive should allow extracting in a different path" name="util.archive should allow extracting in a different path" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="util.streams" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:27" time="0.054" tests="8">
    <testcase classname="util.streams computeDigest should throw if onDigest is not defined" name="util.streams computeDigest should throw if onDigest is not defined" time="0.008">
    </testcase>
    <testcase classname="util.streams computeDigest should throw if the algorithm is unknown" name="util.streams computeDigest should throw if the algorithm is unknown" time="0.001">
    </testcase>
    <testcase classname="util.streams computeDigest should compute a hash of the stream data" name="util.streams computeDigest should compute a hash of the stream data" time="0.002">
    </testcase>
    <testcase classname="util.streams computeDigest should return a digest using the passed algorithm" name="util.streams computeDigest should return a digest using the passed algorithm" time="0.001">
    </testcase>
    <testcase classname="util.streams bytesLimit should throw if limit is not defined" name="util.streams bytesLimit should throw if limit is not defined" time="0.001">
    </testcase>
    <testcase classname="util.streams bytesLimit should throw if limit is not a positive integer" name="util.streams bytesLimit should throw if limit is not a positive integer" time="0.001">
    </testcase>
    <testcase classname="util.streams bytesLimit should not do anything if the byte limit is not reached" name="util.streams bytesLimit should not do anything if the byte limit is not reached" time="0.002">
    </testcase>
    <testcase classname="util.streams bytesLimit should error if the byte limit is reached" name="util.streams bytesLimit should error if the byte limit is reached" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="path.analyzers.file" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:28" time="0.051" tests="8">
    <testcase classname="path.analyzers.file should not update token if already analyzed" name="path.analyzers.file should not update token if already analyzed" time="0.002">
    </testcase>
    <testcase classname="path.analyzers.file should not return any type when none detectable" name="path.analyzers.file should not return any type when none detectable" time="0.002">
    </testcase>
    <testcase classname="path.analyzers.file should error when the file is not found" name="path.analyzers.file should error when the file is not found" time="0">
    </testcase>
    <testcase classname="path.analyzers.file should use the fileName extension to add a fileType" name="path.analyzers.file should use the fileName extension to add a fileType" time="0">
    </testcase>
    <testcase classname="path.analyzers.file should not set a mime for unknown extensions" name="path.analyzers.file should not set a mime for unknown extensions" time="0.001">
    </testcase>
    <testcase classname="path.analyzers.file should not add a fileType when there is no extension" name="path.analyzers.file should not add a fileType when there is no extension" time="0.001">
    </testcase>
    <testcase classname="path.analyzers.file should detect file type with the first chunk" name="path.analyzers.file should detect file type with the first chunk" time="0.001">
    </testcase>
    <testcase classname="path.analyzers.file should preserve existing file types" name="path.analyzers.file should preserve existing file types" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="http.analyzers.types" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:28" time="0.042" tests="8">
    <testcase classname="http.analyzers.types should not update token if already analyzed" name="http.analyzers.types should not update token if already analyzed" time="0.002">
    </testcase>
    <testcase classname="http.analyzers.types should extract the type from the content-type header" name="http.analyzers.types should extract the type from the content-type header" time="0.001">
    </testcase>
    <testcase classname="http.analyzers.types should not return an extension for unknown mime types" name="http.analyzers.types should not return an extension for unknown mime types" time="0">
    </testcase>
    <testcase classname="http.analyzers.types should not return a type if an error occurs" name="http.analyzers.types should not return a type if an error occurs" time="0">
    </testcase>
    <testcase classname="http.analyzers.types should use the fileName extension to add a fileType" name="http.analyzers.types should use the fileName extension to add a fileType" time="0">
    </testcase>
    <testcase classname="http.analyzers.types should not set a mime for unknown extensions" name="http.analyzers.types should not set a mime for unknown extensions" time="0">
    </testcase>
    <testcase classname="http.analyzers.types should not add a fileType when there is no extension" name="http.analyzers.types should not add a fileType when there is no extension" time="0.002">
    </testcase>
    <testcase classname="http.analyzers.types should return 2 types if content-type and fileName are available" name="http.analyzers.types should return 2 types if content-type and fileName are available" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="http.analyzers.file" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:28" time="0.04" tests="1">
    <testcase classname="http.analyzers.file should not update token if already analyzed" name="http.analyzers.file should not update token if already analyzed" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="http.analyzers.name" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:28" time="0.04" tests="7">
    <testcase classname="http.analyzers.name should not update token if already analyzed" name="http.analyzers.name should not update token if already analyzed" time="0.002">
    </testcase>
    <testcase classname="http.analyzers.name should use content disposition header when available" name="http.analyzers.name should use content disposition header when available" time="0.002">
    </testcase>
    <testcase classname="http.analyzers.name should decode rfc2047 from content disposition header" name="http.analyzers.name should decode rfc2047 from content disposition header" time="0">
    </testcase>
    <testcase classname="http.analyzers.name should use finalUrl filename when content disposition is not available" name="http.analyzers.name should use finalUrl filename when content disposition is not available" time="0.001">
    </testcase>
    <testcase classname="http.analyzers.name should decode filenames coming from URLs" name="http.analyzers.name should decode filenames coming from URLs" time="0">
    </testcase>
    <testcase classname="http.analyzers.name should not set a fileName when finalUrl does not include a file name" name="http.analyzers.name should not set a fileName when finalUrl does not include a file name" time="0">
    </testcase>
    <testcase classname="http.analyzers.name should use finalUrl for invalid content disposition headers" name="http.analyzers.name should use finalUrl for invalid content disposition headers" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="path.analyzers.directory" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:28" time="0.04" tests="5">
    <testcase classname="path.analyzers.directory should not update token if already analyzed" name="path.analyzers.directory should not update token if already analyzed" time="0.001">
    </testcase>
    <testcase classname="path.analyzers.directory should return a child for each item in the directory" name="path.analyzers.directory should return a child for each item in the directory" time="0.001">
    </testcase>
    <testcase classname="path.analyzers.directory should set the token type to directory" name="path.analyzers.directory should set the token type to directory" time="0">
    </testcase>
    <testcase classname="path.analyzers.directory should set the token as analyzed" name="path.analyzers.directory should set the token as analyzed" time="0.001">
    </testcase>
    <testcase classname="path.analyzers.directory should pass the fromUrl attribute down to children" name="path.analyzers.directory should pass the fromUrl attribute down to children" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="util.streams" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:28" time="0.042" tests="2">
    <testcase classname="util.streams should create a tmp directory prefixed with plunger_" name="util.streams should create a tmp directory prefixed with plunger_" time="0.002">
    </testcase>
    <testcase classname="util.streams should change the prefix when specified" name="util.streams should change the prefix when specified" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="path.analyzers.file" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:28" time="0.037" tests="3">
    <testcase classname="path.analyzers.file should not update token if already analyzed" name="path.analyzers.file should not update token if already analyzed" time="0.002">
    </testcase>
    <testcase classname="path.analyzers.file should set the token type to file" name="path.analyzers.file should set the token type to file" time="0">
    </testcase>
    <testcase classname="path.analyzers.file should set the token as analyzed" name="path.analyzers.file should set the token as analyzed" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="path.analyzers.name" errors="0" failures="0" skipped="0" timestamp="2023-08-31T20:36:28" time="0.036" tests="2">
    <testcase classname="path.analyzers.name should not update token if already analyzed" name="path.analyzers.name should not update token if already analyzed" time="0.001">
    </testcase>
    <testcase classname="path.analyzers.name should use the basename of the path to set the fileName" name="path.analyzers.name should use the basename of the path to set the fileName" time="0">
    </testcase>
  </testsuite>
</testsuites>